{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "prac-data-factory"
		},
		"Trigger_Incremental_Copy1_properties_Incremental_Copy1_parameters_windowStart": {
			"type": "string",
			"defaultValue": "@{addminutes(trigger().scheduledTime, -1)}"
		},
		"Trigger_Incremental_Copy1_properties_Incremental_Copy1_parameters_windowEnd": {
			"type": "string",
			"defaultValue": "@trigger().scheduledTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/1-load_data_from_localserver_to_azureDB_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will extract data from sql server in localhost and load it to Azure SQL Server resource database.",
				"activities": [
					{
						"name": "CopyDataFromLocaltoAzureDB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerLocal_dataset_101_1",
								"type": "DatasetReference",
								"parameters": {
									"dbName_odDataset": {
										"value": "@pipeline().parameters.fromDB",
										"type": "Expression"
									},
									"schemaName_ofDataset": {
										"value": "@pipeline().parameters.fromSchema",
										"type": "Expression"
									},
									"tableName_ofDataset": {
										"value": "@pipeline().parameters.fromTable",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlServer_dataset_101_1",
								"type": "DatasetReference",
								"parameters": {
									"dbName_ofDataset": {
										"value": "@pipeline().parameters.toDB",
										"type": "Expression"
									},
									"schemaName_ofDataset": {
										"value": "@pipeline().parameters.toSchema",
										"type": "Expression"
									},
									"tableName_ofDataset": {
										"value": "@pipeline().parameters.toTable",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fromDB": {
						"type": "string",
						"defaultValue": "test_db"
					},
					"toDB": {
						"type": "string",
						"defaultValue": "pracDB"
					},
					"fromSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"fromTable": {
						"type": "string",
						"defaultValue": "tblProducts"
					},
					"toSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"toTable": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF101"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T11:43:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/2-copy_all_tables_DB_to_DB_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline copies all the table from one database to another database.",
				"activities": [
					{
						"name": "GetAllTheTableNamesInDatabase",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT TABLE_SCHEMA, TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\nWHERE TABLE_TYPE='Base Table';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SqlServerDataset_local_2",
								"type": "DatasetReference",
								"parameters": {
									"dbName_dataset": {
										"value": "@pipeline().parameters.fromDatabase",
										"type": "Expression"
									},
									"schemaName_dataset": "dbo",
									"tableName_dataset": "tblProducts"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachtoLoopthroughAllTables",
						"description": "This loop will take the array of table schemas and names from the lookup activity, and will do the copy activity one by one",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetAllTheTableNamesInDatabase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetAllTheTableNamesInDatabase').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy all tables from one database to another",
									"description": "This activity will take the names of schema.table from forEach item one by one, and will copy it from one database to another. The database names can be set in the pipeline parameters.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SqlServerDataset_local_2",
											"type": "DatasetReference",
											"parameters": {
												"dbName_dataset": {
													"value": "@pipeline().parameters.fromDatabase",
													"type": "Expression"
												},
												"schemaName_dataset": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"tableName_dataset": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "SqlServerDataset_local_2",
											"type": "DatasetReference",
											"parameters": {
												"dbName_dataset": {
													"value": "@pipeline().parameters.toDatabase",
													"type": "Expression"
												},
												"schemaName_dataset": {
													"value": "@item().TABLE_SCHEMA",
													"type": "Expression"
												},
												"tableName_dataset": {
													"value": "@item().TABLE_NAME",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fromDatabase": {
						"type": "string",
						"defaultValue": "test_db"
					},
					"toDatabase": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ADF100"
				},
				"annotations": [],
				"lastPublishTime": "2023-06-23T11:43:47Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental_Copy2_watermark')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "tblWaterMark_lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "watermark_dataset_tbl",
								"type": "DatasetReference",
								"parameters": {
									"schemaName_inDataset": {
										"value": "@pipeline().parameters.schemaName",
										"type": "Expression"
									},
									"tableName_inDataset": {
										"value": "@pipeline().parameters.waterMarktableName",
										"type": "Expression"
									},
									"dbName_inDataset": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "FILE_SOURCE_lookup",
						"description": "Gets the maximum lastmodifytime.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT MAX(lastmodifytime) AS max_date FROM increment.FILE_SOURCE;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "watermark_dataset_tbl",
								"type": "DatasetReference",
								"parameters": {
									"schemaName_inDataset": {
										"value": "@pipeline().parameters.schemaName",
										"type": "Expression"
									},
									"tableName_inDataset": {
										"value": "@pipeline().parameters.mainTableName",
										"type": "Expression"
									},
									"dbName_inDataset": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Copy_Latest_data_to_blob",
						"description": "This activity will copy the updated data to azure blob storage in CSV format.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "tblWaterMark_lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "FILE_SOURCE_lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM increment.FILE_SOURCE WHERE\nlastmodifytime > '@{activity('tblWaterMark_lookup').output.firstRow.WatermarkValue}'\nAND\nlastmodifytime <= '@{activity('FILE_SOURCE_lookup').output.firstRow.max_date}';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "watermark_dataset_tbl",
								"type": "DatasetReference",
								"parameters": {
									"schemaName_inDataset": {
										"value": "@pipeline().parameters.schemaName",
										"type": "Expression"
									},
									"tableName_inDataset": {
										"value": "@pipeline().parameters.mainTableName",
										"type": "Expression"
									},
									"dbName_inDataset": {
										"value": "@pipeline().parameters.dbName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "watermark_dataset_csv_op",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "StoredProcedure_updateWatermarkTbl",
						"description": "This stored procedure updates the value in the water mark table, which will make the next incremental copy valid for next updates.",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_Latest_data_to_blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spUpdateWatermarkTbl]",
							"storedProcedureParameters": {
								"lastmodifytime": {
									"value": {
										"value": "@activity('FILE_SOURCE_lookup').output.firstRow.max_date",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"Tablename": {
									"value": {
										"value": "@activity('tblWaterMark_lookup').output.firstRow.TableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "SqlServer_local_linkedService",
							"type": "LinkedServiceReference",
							"parameters": {
								"linkedServicedbName": {
									"value": "@pipeline().parameters.dbName",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dbName": {
						"type": "string",
						"defaultValue": "azureDB"
					},
					"schemaName": {
						"type": "string",
						"defaultValue": "increment"
					},
					"waterMarktableName": {
						"type": "string",
						"defaultValue": "tblWaterMark"
					},
					"mainTableName": {
						"type": "string",
						"defaultValue": "FILE_SOURCE"
					}
				},
				"folder": {
					"name": "Incremental_Load"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_Incremental_Copy1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Incremental_Copy1",
							"type": "PipelineReference"
						},
						"parameters": {
							"windowStart": {
								"type": "Expression",
								"value": "[parameters('Trigger_Incremental_Copy1_properties_Incremental_Copy1_parameters_windowStart')]"
							},
							"windowEnd": {
								"type": "Expression",
								"value": "[parameters('Trigger_Incremental_Copy1_properties_Incremental_Copy1_parameters_windowEnd')]"
							}
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 1,
						"startTime": "2023-06-29T16:11:00Z",
						"endTime": "2023-06-30T16:11:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental_Copy3_optimised')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This is the practical implementation of incremental load using lookup table.",
				"activities": [
					{
						"name": "Lookup_LookupTable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT * FROM LookupTable;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "incremen_cpy_optimised_sqlserverTbl_dataset",
								"type": "DatasetReference",
								"parameters": {
									"dbName_dataset": "sample6",
									"schemaName_dataset": "dbo",
									"tableName_dataset": "Employee"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"description": "This will loop through all the entries present in the Lookup Table dataset.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup_LookupTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup_LookupTable').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT * FROM @{item().Source_tbl_name}\nWHERE @{item().Datecolumn_name} > '@{item().Lastmodified_date}';",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "incremen_cpy_optimised_sqlserverTbl_dataset",
											"type": "DatasetReference",
											"parameters": {
												"dbName_dataset": "sample6",
												"schemaName_dataset": "dbo",
												"tableName_dataset": "Employee"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "incremen_cpy_optimised_sqlserverTbl_dataset",
											"type": "DatasetReference",
											"parameters": {
												"dbName_dataset": "sample6",
												"schemaName_dataset": "dbo",
												"tableName_dataset": {
													"value": "@item().Destination_tbl_name",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "SP_updateLookupTable",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spUpdateLookupTable]",
										"storedProcedureParameters": {
											"tableName": {
												"value": {
													"value": "@item().Destination_tbl_name",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SqlServer_local_linkedService",
										"type": "LinkedServiceReference",
										"parameters": {
											"linkedServicedbName": {
												"value": "@pipeline().parameters.dbName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"dbName": {
						"type": "string",
						"defaultValue": "sample6"
					}
				},
				"folder": {
					"name": "Incremental_Load"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}